<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Es2015 on hoshinotsuyoshi.com</title>
    <link>https://hoshinotsuyoshi.com/tags/es2015/index.xml</link>
    <description>Recent content in Es2015 on hoshinotsuyoshi.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2016</copyright>
    <atom:link href="https://hoshinotsuyoshi.com/tags/es2015/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>{ prop1, prop2 }みたいなオブジェクト記法(shorthand property names)と文字列リテラルを使わないhello world</title>
      <link>https://hoshinotsuyoshi.com/post/shorthand_property_names_hello_world/</link>
      <pubDate>Sat, 14 Jan 2017 11:43:09 +0900</pubDate>
      
      <guid>https://hoshinotsuyoshi.com/post/shorthand_property_names_hello_world/</guid>
      <description>&lt;p&gt;JSの波括弧に感動するシリーズ、第2回です。&lt;/p&gt;

&lt;p&gt;なお今回の第2回目で最終回の予定です!!&lt;/p&gt;

&lt;p&gt;第1回目はこちら(&lt;a href=&#34;https://hoshinotsuyoshi.com/post/arrow_func_no_brace/&#34;&gt;君はarrow functionの波括弧省略について知っているか&lt;/a&gt;)でした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;shorthand-property-names&#34;&gt;✎Shorthand property names&lt;/h3&gt;

&lt;p&gt;最近のオブジェクトは、このように書けるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var prop1 = &#39;a&#39;;
var prop2 = &#39;b&#39;;
{ prop1, prop2 } //  {prop1: &amp;quot;a&amp;quot;, prop2: &amp;quot;b&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記↓のページに説明が書いてあります。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;6f257114b6df4413a3f5872a7e143278&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Object_initializer&#34;&gt;オブジェクト初期化子&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;オブジェクトは new Object() 、 Object.create() 、 リテラル 表記法 ( initializer 表記法)を使用して初期化されます。オブジェクト初期化子はオブジェクトのプロパティ名と関連した値のゼロ以上のペアのリストです。中括弧( {} )で囲まれます。&lt;/p&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shorthand property names&lt;/code&gt;て言うんですね、知らなかった。。&lt;/p&gt;

&lt;h4 id=&#34;さて感想&#34;&gt;✎さて感想&lt;/h4&gt;

&lt;p&gt;わたしはRubyばかり書くマンなので、これはRubyでいうところの&lt;code&gt;Set&lt;/code&gt;に似てるなと思いました。&lt;/p&gt;

&lt;p&gt;似てないですかね。重複がないのを保証してくれるのが、&lt;code&gt;Set&lt;/code&gt;に近いと思いました。&lt;/p&gt;

&lt;h4 id=&#34;文字列リテラルを使わずにhello-worldを出力しなさい-というお題&#34;&gt;✎「文字列リテラルを使わずにhello worldを出力しなさい」というお題&lt;/h4&gt;

&lt;p&gt;この記法のメリットとしては、まあ実務上もいろいろあると思うんですが、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;実務上じゃない範囲で&lt;/strong&gt;考えますと、以下の問題を簡単に解くことができることに気づきました！&lt;/p&gt;

&lt;p&gt;&lt;code&gt;文字列リテラルを使わずにhello worldを出力しなさい&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;これは意外と難しくて、例えば、こんな解き方があるみたいです↓。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;6f257114b6df4413a3f5872a7e143278&#34; data-card-type=&#34;article&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://qiita.com/alucky0707/items/6ecb34253c9cb206c53e&#34;&gt;JavaScriptで文字列と数値リテラルを使わずにHello World - Qiita&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;何を今更、って感じですが書きたくなったので許してください。 元ネタ= &lt;a href=&#34;https://codeiq.jp/ace/cielavenir/q431&#34;&gt;https://codeiq.jp/ace/cielavenir/q431&lt;/a&gt; 僕が書いたらこんな風になりました。 var zero = +String.prototype, one = -~zero, two = one  one, four = one  two, hundred = ({} + zero).charCodeAt(two) + two; &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;難しいですね。&lt;/p&gt;

&lt;h3 id=&#34;shorthand-property-namesを使えば簡単さ&#34;&gt;✎Shorthand property namesを使えば簡単さ。&lt;/h3&gt;

&lt;p&gt;こうすればいいことに気づいた！！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var ハローワールド;
console.log(Object.keys({ハローワールド})[0]); // ハローワールド
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;はい！！！！！！！ 🌃🌃&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;とりあえず手元のChrome55では動作します。 🌠🌠🌠&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>君はarrow functionの波括弧省略について知っているか</title>
      <link>https://hoshinotsuyoshi.com/post/arrow_func_no_brace/</link>
      <pubDate>Tue, 10 Jan 2017 04:12:50 +0900</pubDate>
      
      <guid>https://hoshinotsuyoshi.com/post/arrow_func_no_brace/</guid>
      <description>&lt;p&gt;引き続き勉強兼ねて&lt;a href=&#34;https://hoshinotsuyoshi.com/post/jobcan_flex_chrome/&#34;&gt;chrome拡張書いてる&lt;/a&gt;んですが、
そのときに読んで知った初心者メモ。&lt;/p&gt;

&lt;p&gt;引数の丸括弧&lt;code&gt;()&lt;/code&gt;の省略については知っていたんですが、波括弧&lt;code&gt;{}&lt;/code&gt;も省略できる時があるんですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;1行だけ・かつ返り値として扱うときにこう書ける。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// #1
twice = n =&amp;gt; n * 2;
twice(3); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#1は波括弧を省略しているためそのステートメントの結果が返り値になります。&lt;/p&gt;

&lt;p&gt;つまり↑の#1は以下#2と等価ではありません。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// #2
twice = n =&amp;gt; { n * 2; }
twice(3); // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#1は以下#3と等価です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// #3
twice = n =&amp;gt; { return n * 2; }
twice(3); // 6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;さて&#34;&gt;さて&lt;/h3&gt;

&lt;p&gt;オブジェクトリテラルも波括弧(&lt;code&gt;{&lt;/code&gt;)を使うので、&lt;/p&gt;

&lt;p&gt;arrow(&lt;code&gt;=&amp;gt;&lt;/code&gt;)の&lt;strong&gt;次にオブジェクトリテラルが来ると混乱しそう&lt;/strong&gt;ですが、&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// object リテラル式を返す場合は、本体を丸括弧 () で囲みます:
params =&amp;gt; ({foo: bar})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions&#34;&gt;アロー関数 - JavaScript _ MDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのことです。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;手元のchrome(chrome55)で確認すると、こんな感じでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;bar = 1
func1 = params =&amp;gt; ({foo: bar})
func2 = params =&amp;gt; {foo: bar}

console.log(func1()); // Object {foo: 1}

console.log(func2()) // undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なるほど…&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>